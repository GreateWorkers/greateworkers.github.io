{
  
  "1": {
    "title": "Github blog",
    "content": "Github 블로그 . Github을 통해 블로그를 만듭니다. .",
    "url": "http://localhost:4000/docs/Github%20blog",
    "relUrl": "/docs/Github blog"
  }
  ,"2": {
    "title": "설치 Folk github",
    "content": "Folk . . 소개 | 블로그 소스 찾기 | 소스 Folk | 서비스 시작 | 도메인 연결 | Robots.txt | . 소개 . 적당한 소스 찾아서 바로 소스를 가져와 서비스를 시작하여 Github 블로그를 체험 . Github 페이지에서 글자 바꿔가며 테스트하고 감 잡을 수 있어서 좋은 듯 . . 블로그 소스 찾기 . 간단한 블로그 소스를 찾습니다 https://jekyllthemes.io/free . . github 저장소로 들어갑니다. . . 소스 Folk . 소스를 Folk 하여 저장소 설정을 합니다. . setting 버튼을 클릭하여 들어갑니다. . 저장소 이름을 지정합니다. Repository name . [본인 아이디].github.io 로 설정합니다. . 저런식으로 주소를 입력하고 들어올 수 있는 것은 하나만 지정할 수 있습니다. 저는 greateworkers.github.io 로 지정했습니다. . . 서비스 시작 . 잠시 기다렸다가 [본인 아이디].github.io 주소창에 입력하여 확인합니다. . . 도메인 연결 . 보유한 도메인에 설정하고 싶은 경우 설정합니다. 화면을 좀 더 내리면 아래 설정이 나옵니다. . custom domain 에 보유 도메인을 입력합니다. 본인 사이트는 https를 강제 리다이렉션이 되어있습니다. 그래서 아래 https 리다이렉션도 체크했습니다. . . Robots.txt . robots.txt를 작성하여 크롤링 범위를 설정합니다. 우선 아래와 같이 작성하여 메인에(root 폴더에) 추가합니다. . 안해도 됨 . User-agent: * Disallow: / .",
    "url": "http://localhost:4000/docs/Github%20blog/Install-Folk/",
    "relUrl": "/docs/Github%20blog/Install-Folk/"
  }
  ,"3": {
    "title": "Github ssh key 등록 후 push",
    "content": "Github push ssh key 등록하기 . . 소개 | jekyll Github에 올리기 | Github ssh key 등록하기 | Github 저장소 생성 | Github 저장소 checkout | . 소개 . jekyll을 로컬에 프로젝트 설치한 상태에서 Github에 올리기 . . jekyll Github에 올리기 . Folk 라는 프로그램을 사용하여 github에 저장소를 생성하거나 사이트에서 생성 잘 몰라도 Folk 가 무지 편하네. . . 그림의 ssh 탭을 클릭하면 ssh 키를 생성하여 사용할 수 있다 . . . Github ssh key 등록하기 . Folk 로 sshkey 생성해서 추가한다 . . 그리고 ssh 키를 Github 사이트에 자동 등록해주던 것 같은데 만약 안되면 Github 계정 프로파일에 들어가서 생성한 키를 등록해준다 . . . Github 저장소 생성 . 그리고 github에 저장소를 생성하였다 . . . Github 저장소 checkout . 생성한 저장소를 아무곳에 clone 한다 생성한 저장소의 .git 폴더를 복사해서 jekyll 폴더로 옮긴다 Folk 프로그램에서 jekyll 폴더를 open 해주면 된다 clone 할 때 덮어쓰기가 된 것 같기도 한대 . .",
    "url": "http://localhost:4000/docs/Github%20blog/Install-Local-addgit/",
    "relUrl": "/docs/Github%20blog/Install-Local-addgit/"
  }
  ,"4": {
    "title": "설치 Jekyll",
    "content": "설치 Jekyll . . 소개 | jekyll rvm 및 루비 설치 | jekyll 프로젝트 폴더 생성 | | jekyll server 실행 | 브라우저로 확인 | 오류 | . 소개 . jekyll 로컬 서버와 연동하여 블로그를 만듭니다. github에 올려 서비스합니다. . 저는 맥 osx mojave 10.14 입니다. 구형 맥북으로 macbook 13inch 2010 unibody 입니다. . . jekyll . 루비! 설치하는데 다소 시간이 걸렸지만 오류는 없었습니다. 테마에 설정시에도 큰 문제는 없었습니다. . . rvm 및 루비 설치 . 아래를 통해 설치한 루비 버전입니다. ruby -v ruby 2.5.0p0 (2017-12-25 revision 61468) [x86_64-darwin18] . rvm 설치합니다. rvm 관련 링크 rvm 루비 설치합니다. 루비 버전 확인 ruby . curl -sSL https://get.rvm.io | bash -s stable&lt;br&gt; rvm --default use 2.5.0 sudo gem install jekyll bundler . . . jekyll 프로젝트 폴더 생성 . 적당한 폴더 위치로 이동합니다. 폴더를 생성학고 아래 명령어를 실행합니다. . jekyll new greateworkers.github.io cd greateworkers.github.io ls 404.html Gemfile.lock _posts index.markdown Gemfile _config.yml about.markdown . . jekyll server 실행 . jekyll 로컬 서버 실행합니다. . jekyll serve . . jekyll 포트를 바꿀 수 있습니다. . jekyll serve --port 4001 . . jekyll serve 실행 결과 입니다. . Configuration file: /mypath/greateworkers.github.io/_config.yml Source: /mypath/greateworkers.github.io Destination: /mypath/greateworkers.github.io/_site Incremental build: disabled. Enable with --incremental Generating... Jekyll Feed: Generating feed for posts done in 1.356 seconds. Auto-regeneration: enabled for &#39;/mypath/greateworkers.github.io&#39; Server address: http://127.0.0.1:4000/ Server running... press ctrl-c to stop. . . 브라우저로 확인 . browser 열고 127.0.0.1:4000 (default) 입력합니다. . . 오류 . fsevent: running worker failed: incompatible character encodings: ASCII-8BIT and UTF-8 . 대분류에 한글 쓰니 나타나는 오류 .",
    "url": "http://localhost:4000/docs/Github%20blog/Install-Local/",
    "relUrl": "/docs/Github%20blog/Install-Local/"
  }
  ,"5": {
    "title": "virtual machine 에 ubuntu 설치",
    "content": "Virtual Machine 에 ubuntu 설치 . . 소개 | 설치 환경 | Virtual Machine 설치 | Virtualbox 네트워크 설정 | ubuntu 설치 | Virtual Machine 에 설치된 ubuntu terminal 접속 | ubuntu kakao 로 다운로드 링크 변경 | . 소개 . virtual machine 을 ubuntu 설치하고 nginx + uwsgi + django project 실행 . cpu 가 저사양이라 다소 버벅임 . 터미널로 접속하여 사용 . . 설치 환경 . 2.4 intel core 2 duo macbook pro 13inch 2010 osx 10.14 mojave 16g ram . . Virtual Machine 설치 . Virtualbox download https://www.virtualbox.org . | ubuntu lts download http://releases.ubuntu.com . | ubuntu lts 18 선택 . | . . Virtualbox 네트워크 설정 . 설치 이미지 설정 &gt; 네트워크 탭 &gt; 어댑터에 브리지 선택 &gt; 재부팅 | VM 에서 다운 받은 ubuntu OS 세션을 생성하고 이미지를 선택하여 설치를 진행한다. | . . ubuntu 설치 . 우분투 설치시 몇 번 실패하였다. 아래 옵션은 변경하여 설치 . kr 을 us.archive.ubuntu.com/ubuntu 을 변경 . kr.archive.ubuntu.com/ubuntu us.archive.ubuntu.com/ubuntu . 파티션 선택 항목에서 기본 entire disk 을 entire disk and LVM 이라는 항목으로 변경 . | curtin &gt; LVM 으로 설치 마지막에 업데이트 하는데 그냥 끄고 재부팅 . | . . Virtual Machine 에 설치된 ubuntu terminal 접속 . 설치 후 조금 기다렸다가 . | ifconfig 실행 상세내용이 출력 됨 &gt; inet addr 에 ip 확인 ( 공유기에서 할당받은 ip가 뜸 ) . | terminal 로 접속 ssh ubuntu@192.168.x.x . | yes/no 질문에 yes . | . . ubuntu kakao 로 다운로드 링크 변경 . 파일 내에 있는 모든 저장소 주소를 mirror.kakao.com으로 변경해주면 된다. . sudo vi /etc/apt/sources.list . %s/(변경할 대상)/(변경할 값) 명령어를 사용. 키보드 : 누르고 아래와 같이 . :%s/kr.archive.ubuntu.com/mirror.kakao.com . 패키지 업데이트 . sudo apt-get update . .",
    "url": "http://localhost:4000/docs/Ubuntu_django/Ubuntu_VirtualMachine/",
    "relUrl": "/docs/Ubuntu_django/Ubuntu_VirtualMachine/"
  }
  ,"6": {
    "title": "Ubuntu django 설치",
    "content": "Ubuntu &amp; django 설치 . 먼저 Ubuntu 설치를 위해 VirtualMachine 을 설치 . virtual machine 을 ubuntu 설치하고 nginx + uwsgi + django project 실행 . 터미널로 접속하여 사용 가상머신을 사용하면 IDE가 불편함 .",
    "url": "http://localhost:4000/docs/Ubuntu%20django%20%EC%84%A4%EC%B9%98",
    "relUrl": "/docs/Ubuntu django 설치"
  }
  ,"7": {
    "title": "ubuntu 에 django 설치",
    "content": "Virtual Machine 에 ubuntu 설치 . . 설치 환경 | package 설치 | virtualenv 설정 | django 설치 | uwsgi 설정 파일 | nginx 설정 파일 | 오류 메세지 | . 설치 환경 . 2.4 intel core 2 duo macbook pro 13inch 2010 osx 10.14 mojave 16g ram . . package 설치 . 파이선 3.6을 설치합니다. . sudo apt-get install python3.6 python3-dev python3-pip . nginx 를 설치합니다. . sudo apt-get install nginx . pip을 업그레이드합니다. . sudo -H pip3 install --upgrade pip . 가상환경을 설치합니다. . sudo -H pip3 install wheel sudo -H pip3 install virtualenv . uwsgi는 pip을 통해 가상환경에 설치. uwsgi를 관리하는 방식에 따라 아래와 같이 할 수 있음 난 Django 가상환경에 pip으로 설치하여 사용 . sudo -H pip3 install uwsgi . . virtualenv 설정 . 파이선의 버전을 지정하여 가상환경을 설치. 차후 pip 패키지 설치 시 파이선 버전오류가 발생하지 않음. | . 가상환경 설치 . virtualenv --python=python3.6 myvenv . 가상환경 실행 . . myvenv/bin/activate . . django 설치 . django 설치 . pip install django . 장고에 webserver 프로젝트 생성 . django-admin startproject webserver . 슈퍼 유저 생성 (관리자 페이지 접속 가능) 이름 / 이메일 등을 입력 ( 이름만 입력하고 패스가능 ) . | 마이그레이션 / 마이그레이트 실행 데이타베이스 생성 및 적용 . | 로컬 서버 실행 서버가 실행되면서 웹브라우저에서 접속할 주소가 표시된다 직접할려면 . | . python manage.py createsuperuser python manage.py makemigrations python manage.py migrate python manage.py runserver python manage.py runserver 127.0.0.1:8000 python manage.py runserver 127.0.0.1:8000 --settings=[사용할 셋팅 파일지정] . . uwsgi 설정 파일 . 빠른 웹서비스와 보안을 위해 uwsgi 와 nginx 를 셋팅 | uwsgi ini 파일 생성하여 실행한다 | uid / gid 의 deploy 는 www-data 로 변경 가능 nginx 의 기본 유저는 www-data 임 | . . ubuntu 에서 실제 서비스할 설정 파일 deploy.ini | . [uwsgi] sitename = mysite chmod-socket = 660 uid = deploy gid = deploy home = /home/사용자이름/%(sitename)/myvenv chdir = /home/사용자이름/%(sitename)/webserver socket = /home/사용자이름/%(sitename)/tmp/%(sitename).sock pidfile = /home/사용자이름/%(sitename)/tmp/%(sitename).pid logto = /home/사용자이름/%(sitename)/tmp/@(exec://date +%%Y-%%m-%%d).log chown-socket = %(uid):%(gid) module = server.wsgi.remote:application thunder-lock = true enable-threads = true vacuum = true log-reopen = true . 맥에서 디버그용 debug.ini | . [uwsgi] home = mypath/myvenv chdir = mypath/webserver socket = mypath/webserver/uwsgi/tmp/lightsail.sock pidfile = mypath/webserver/uwsgi/tmp/lightsail.pid module = server.wsgi.debug chmod-socket=666 . 로컬 저장 위치는 mypath/webserver/uwsgi 에 저장 . | 실제 서비스할 곳은 uwsgi emperor 를 위해 한 곳에 모아둔다 . | . nginx 설정 파일 . 오류 메세지 .",
    "url": "http://localhost:4000/docs/Ubuntu_django/Ubuntu_django_install/",
    "relUrl": "/docs/Ubuntu_django/Ubuntu_django_install/"
  }
  ,"8": {
    "title": "Lightsail 에 웹서비스",
    "content": "Lightsail 에 웹서비스 . . .",
    "url": "http://localhost:4000/docs/Ubuntu_django/Ubuntu_django_lightsail/",
    "relUrl": "/docs/Ubuntu_django/Ubuntu_django_lightsail/"
  }
  ,"9": {
    "title": "",
    "content": "",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  }
  ,"10": {
    "title": "Home",
    "content": "안녕하세요 . Github에 생성한 블로그입니다. . Family sites . GreateWorkers.kr Petitions Playground My Food View it on GitHub .",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  }
  ,"11": {
    "title": "theme just-the-docs",
    "content": "현재 사용 중인 테마 . . Font stack | Responsive type scale | Headings | Body text | Inline elements | Typographic Utilities | Color schemes | Specific visual customization | Override styles | . Font stack . By default, Just the Docs uses a native system font stack for sans-serif fonts: . -apple-system, BlinkMacSystemFont, &quot;helvetica neue&quot;, helvetica, roboto, noto, &quot;segoe ui&quot;, arial, sans-serif . ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz . For monospace type, like code snippets or the &lt;pre&gt; element, Just the Docs uses a native system font stack for monospace fonts: . &quot;SFMono-Regular&quot;, Menlo, Consolas, Monospace . ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz . . Responsive type scale . Just the Docs uses a responsive type scale that shifts depending on the viewport size. . Selector Small screen size font-size Large screen size font-size . h1, .text-alpha | 32px | 36px | . h2, .text-beta | 18px | 24px | . h3, .text-gamma | 16px | 18px | . h4, .text-delta | 14px | 16px | . h5, .text-epsilon | 16px | 18px | . h6, .text-zeta | 18px | 24px | . body | 14px | 16px | . . Headings . Headings are rendered like this: . Heading 1 . Heading 2 . Heading 3 . Heading 4 . Heading 5 . Heading 6 . # Heading 1 ## Heading 2 ### Heading 3 #### Heading 4 ##### Heading 5 ###### Heading 6 . . Body text . Default body text is rendered like this: . Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. . Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. . . Inline elements . Text can be bold, italic, or strikethrough. . Link to another page. . Text can be **bold**, _italic_, or ~~strikethrough~~. [Link to another page](another-page). . . Typographic Utilities . There are a number of specific typographic CSS classes that allow you to override default styling for font size, font weight, line height, and capitalization. . Color schemes . New . Just the Docs supports two color schemes: light (default), and dark. . To enable a color scheme, set the color_scheme parameter in your site’s _config.yml file: . Example . # Color scheme currently only supports &quot;dark&quot; or nil (default) color_scheme: &quot;dark&quot; . Preview dark color scheme . Specific visual customization . To customize your site’s aesthetic, open _sass/custom/custom.scss in your editor to see if there is a variable that you can override. Most styles like fonts, colors, spacing, etc. are derived from these variables. To override a specific variable, uncomment its line and change its value. . For example, to change the link color from the purple default to blue, open _sass/custom/custom.css and find the $link-color variable on line 50. Uncomment it, and change its value to our $blue-000 variable, or another shade of your choosing. . Example . // ... // // $body-text-color: $grey-dk-100; // $body-heading-color: $grey-dk-300; $link-color: $blue-000; // // ... . Note: Editing the variables directly in _sass/support/variables.scss is not recommended and can cause other dependencies to fail. . Override styles . For styles that aren’t defined as a variables, you may want to modify specific CSS classes. To add your own CSS overrides at the end of the cascade, edit _sass/overrides.scss. This will allow for all overrides to be kept in a single file, and for any upstream changes to still be applied. . For example, if you’d like to add your own styles for printing a page, you could add the following styles. . Example . // Print-only styles. @media print { .side-bar, .page-header { display: none; } .main-content { max-width: auto; margin: 1em;} } .",
    "url": "http://localhost:4000/docs/Github%20blog/manual-just-the-docs/",
    "relUrl": "/docs/Github%20blog/manual-just-the-docs/"
  }
  ,"12": {
    "title": "메뉴얼 Jekyll",
    "content": "메뉴얼 Jekyll . . 한국 사이트 | 변수 | . 한국 사이트 . https://jekyllrb-ko.github.io 메뉴얼을 볼 필요 없이 테마별로 사용방법이 있으니 그 정도로만 사용하면 괜찮을 것 같습니다. . 변수 . 테마 소스를 보는 데 도움이 되는 항목의 링크입니다. https://jekyllrb-ko.github.io/docs/variables/ . 전역 변수 사이트 변수 페이지 변수 Paginator .",
    "url": "http://localhost:4000/docs/Github%20blog/manual/",
    "relUrl": "/docs/Github%20blog/manual/"
  }
  ,"13": {
    "title": "공공데이타",
    "content": "작업 진행 예정 . .",
    "url": "http://localhost:4000/docs/publicdata/",
    "relUrl": "/docs/publicdata/"
  }
  
}